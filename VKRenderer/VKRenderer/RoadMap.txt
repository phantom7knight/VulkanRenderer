//============================================
//Vulkan Renderer Project Plans
//============================================



----------------------------------------------
A. Current Pipeline plans
----------------------------------------------

1.	Implement Uniform Buffers -Done
2.	Add Texture through Resource Loader
3.	Generate Shaders through Resource Loader and integrate generation of ByteCode. - Done
4.	Make Model Loader. - Done
5.	Generate Scene Heirarchy.
6.	Generalize Graphics/Compute Pipeline addition to the Command Buffers
7.	Integrate UI into the engine as a seperate static lib. - Done
8.	Implement Lighting in scene.
	a. Phong	- Done
	b. BRDF		- DONE[Based off UE4's paper]
	c. UE4's method for IBL [Pre-Requisite A.10]
9.	Implement Point Lights and also Line Light[Look into the article "http://www.elopezr.com/rendering-line-lights/"][https://wickedengine.net/2017/09/07/area-lights/]
10. Implement HDR Skymap/Skydome.
11. Text Rendering
12. Reading Framebuffers getting familiar with it[See Sascha Willems's post]
12. Bump Mapping
13. Shadows Basic
14. Implement Pipeline cache









----------------------------------------------
B. Tentative Project Plans
----------------------------------------------

1.	Make Post Processing Pipeline
2.	Vulkan Ray Tracing
3.	Deferred Shading
4.	FXAA or TXAA
5.	Shadows Advanced
6.	Implement Compute Shaders		[Implement some simulation	]
7.	Implement Geometry Shader		[ ""		""		""		]
8.	Implement Tesselation Shader	[ ""		""		""		]
9.	Reflection[SSR][Pre-Requisite A.4]
10. Offscreen Rendering[Look at Sascha Willems example]
11. Culling Techniques.[Pre-Requisite A.5]
12. Add GLTF model loader.[Pre-Requisite A.4]
13. Add Debug Markers for RenderDoc.[https://www.saschawillems.de/blog/2016/05/28/tutorial-on-using-vulkans-vk_ext_debug_marker-with-renderdoc/]
14. Parallelize command Buffer recording, resource loading, etc.









